set(LIB_NAME learnopengl)
project(${LIB_NAME}-3.2.2-dev)

if (TARGET ${LIB_NAME})
    message("${BoldYellow}[benni] HEADER_GUARD: ${LIB_NAME}${ColourReset}")
else()
    # add_subdirectory(lib)
    # set(LOGL_DEBUG_MODE 0)
    # if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    # set(LOGL_DEBUG_MODE 1)
    # endif()

    set(LIB_HEADER_DIR ${CMAKE_CURRENT_LIST_DIR}/include)
    set(LIB_SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR}/src/learnopengl)

    file(GLOB_RECURSE LIB_HEADERS_H   "${LIB_HEADER_DIR}/learnopengl/*.h")
    file(GLOB_RECURSE LIB_HEADERS_HPP "${LIB_HEADER_DIR}/learnopengl/*.hpp")
    file(GLOB_RECURSE LIB_SOURCES "${LIB_SOURCE_DIR}/*.[h,c]pp")

    set(LIB_HEADERS ${LIB_HEADERS_H} ${LIB_HEADERS_HPP})
    #   if (WIN32)
    #      enable_language(RC)
    #      list(APPEND IRRXML_SOURCES ${CMAKE_CURRENT_LIST_DIR}/res/resource.h)
    #      list(APPEND IRRXML_SOURCES ${CMAKE_CURRENT_LIST_DIR}/res/resource.rc)
    #   endif()
    #
    if (BUILD_SHARED)
        message("${BoldBlue}[benni] DLL: ${LIB_NAME}${ColourReset}")
        add_library(${LIB_NAME} SHARED "")
    else()
        message("${BoldCyan}[benni] LIB: ${LIB_NAME}${ColourReset}")
        add_library(${LIB_NAME} STATIC "")
    endif()

    target_sources(${LIB_NAME} PUBLIC ${LIB_HEADERS} PRIVATE ${LIB_SOURCES})

    target_include_directories(${LIB_NAME} PUBLIC ${LIB_HEADER_DIR})
    target_include_directories(${LIB_NAME} PRIVATE ${LIB_HEADER_DIR}/learnopengl)
    target_include_directories(${LIB_NAME} PRIVATE ${LIB_SOURCE_DIR})

    # target_compile_definitions(${LIB_NAME} PUBLIC LOGL_NO_DDS=1)
    # target_compile_definitions(${LIB_NAME} PUBLIC LOGL_STATIC=1)
    # target_compile_definitions(${LIB_NAME} PUBLIC LOGL_BUILD=1)
    # target_compile_definitions(${LIB_NAME} PUBLIC LOGL_NO_GLU=1)
    # target_compile_definitions(${LIB_NAME} PUBLIC LOGL_EGL=1)

    if (MSVC)
    else()
        target_compile_options(${LIB_NAME} PRIVATE -Wno-misleading-indentation)
        target_compile_options(${LIB_NAME} PRIVATE -Wno-incompatible-pointer-types)
        # target_compile_options(${LIB_NAME} PRIVATE -fno-builtin -fno-stack-protector)
        # target_link_libraries(${LIB_NAME} LINK_PRIVATE -nostdlib)
    endif()

    target_link_libraries(${LIB_NAME} PUBLIC de_glm)
    target_link_libraries(${LIB_NAME} PUBLIC de_assimp)
    target_link_libraries(${LIB_NAME} PUBLIC de_glad)
    target_link_libraries(${LIB_NAME} PUBLIC de_glfw_glad)
    target_link_libraries(${LIB_NAME} PRIVATE de_stb_image)
    # target_link_libraries(${LIB_NAME} PUBLIC de_soil)
endif()
