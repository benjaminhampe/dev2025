class Async
{
   bool                    m_IsStarted;   
   std::atomic_bool        m_IsCloseRequested;
   std::thread*            m_ThreadPtr;
   mutable std::condition_variable m_CondVar_Started;

   Async()
   {
      
   }

   ~Async()
   {
      stopThread();
   }

   bool
   isCloseRequested() { return m_IsCloseRequested; }

   void
   waitUntilStarted()
   {
      std::mutex m;
      std::unique_lock< std::mutex > guard( m );
      m_CondVar_Started.wait( guard, [ this ] () { return m_IsStarted; } );
   }

   void
   requestClose()
   {
      m_IsCloseRequested = true;
   }

   void startThread()
   {
      m_ThreadPtr = new std::thread( &Async::run, this, arg1, argn... );
      waitUntilStarted();
   }

   void stopThread()
   {
      requestClose();

//      std::mutex m;
//      std::unique_lock< std::mutex > guard( m );
//      m_CondVar_Started.wait( guard, [ this ] () { return !m_IsStarted; } );

      if ( m_ThreadPtr )
      {
         m_ThreadPtr->join();
         delete m_ThreadPtr;
         m_ThreadPtr = nullptr;
      }
   } 

   void
   run( int32_t w, int32_t h )
   {
      // do load and init stuff...

      // load ff movie
      // fill cache until limit reached

      m_IsStarted = true;
      m_CondVar_Started.notify_all();
     
      // DE_DEBUG("Enter main loop")
      
      while ( !m_IsCloseRequested )
      {
         // do stuff or yield or sleep.
      }
      
      DE_DEBUG("Exit main loop")

      m_IsStarted = false;
      m_CondVar_Started.notify_all();
      // DE_DEBUG("Run method finished ok.")
   }
