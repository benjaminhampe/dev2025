set(LIB_NAME de_taglib)
project(${LIB_NAME}-1.11.1-dev CXX)

if (TARGET ${LIB_NAME})
    message("${BoldYellow}[benni] HEADER_GUARD: ${LIB_NAME}${ColourReset}")
else()
    # add_subdirectory(lib)
    set(LIB_HEADER_DIR ${CMAKE_CURRENT_LIST_DIR}/include/taglib)
    set(LIB_SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR}/src/taglib)
    file(GLOB_RECURSE LIB_HEADERS "${LIB_HEADER_DIR}/*.[c,h]pp")
    file(GLOB_RECURSE LIB_SOURCES "${LIB_SOURCE_DIR}/*.[c,h]pp")

    if (WIN32)
        enable_language(RC)
        list(APPEND LIB_SOURCES ${CMAKE_CURRENT_LIST_DIR}/res/resource.h)
        list(APPEND LIB_SOURCES ${CMAKE_CURRENT_LIST_DIR}/res/resource.rc)
    endif()
    
    if (BUILD_SHARED)
        add_library(${LIB_NAME} SHARED "")
        message("${BoldBlue}[benni] DLL: ${LIB_NAME}${ColourReset}")
    else()
        add_library(${LIB_NAME} STATIC "")
        message("${BoldCyan}[benni] LIB: ${LIB_NAME}${ColourReset}")
    endif()

    target_include_directories(${LIB_NAME} PUBLIC ${LIB_HEADER_DIR})
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR})
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/toolkit)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/asf)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/mpeg)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/ogg)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/ogg/flac)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/flac)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/mpc)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/mp4)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/ogg/vorbis)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/ogg/speex)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/ogg/opus)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/mpeg/id3v2)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/mpeg/id3v2/frames)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/mpeg/id3v1)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/ape)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/wavpack)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/trueaudio)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/riff)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/riff/aiff)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/riff/wav)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/mod)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/s3m)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/it)
    target_include_directories(${LIB_NAME} PUBLIC ${LIB_SOURCE_DIR}/xm)

    target_sources(${LIB_NAME} PUBLIC ${LIB_HEADERS} PUBLIC ${LIB_SOURCES})

    target_compile_definitions(${LIB_NAME} PUBLIC TAGLIB_SOVERSION_CURRENT=18)
    target_compile_definitions(${LIB_NAME} PUBLIC TAGLIB_SOVERSION_REVISION=0)
    target_compile_definitions(${LIB_NAME} PUBLIC TAGLIB_SOVERSION_AGE=17)
    target_compile_definitions(${LIB_NAME} PUBLIC TAGLIB_STATIC=1)
    target_compile_definitions(${LIB_NAME} PUBLIC HAVE_ZLIB=1)
    target_compile_definitions(${LIB_NAME} PUBLIC WITH_ASF=1)
    target_compile_definitions(${LIB_NAME} PUBLIC TAGLIB_WITH_ASF=1)
    target_compile_definitions(${LIB_NAME} PUBLIC WITH_MP4=1)
    target_compile_definitions(${LIB_NAME} PUBLIC TAGLIB_WITH_MP4=1)

    if (MSVC)
	else()
        #target_compile_options(${LIB_NAME} PRIVATE -fvisibility=hidden)
        target_compile_options(${LIB_NAME} PRIVATE -ftime-trace)
        target_compile_options(${LIB_NAME} PRIVATE -Wno-deprecated-declarations)
        target_compile_options(${LIB_NAME} PRIVATE -Wno-attributes)
        target_compile_options(${LIB_NAME} PRIVATE -Wno-delete-non-virtual-dtor)
        target_link_libraries(${LIB_NAME} PRIVATE m)
    endif()
 
    target_link_libraries(${LIB_NAME} PUBLIC de_zlib)

endif()

# add_subdirectory(test)

